<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.miniproj.mappers.rboardmapper">


	<!-- 게시판의 모든 게시글을 번호 내림차순 정렬하여 가져오는 쿼리문 -->
	<select id="getAllHBoard"
		resultType="com.miniproj.model.HBoardVO">
		select * from hboard where boardType='rboard' order by
		boardNo desc limit #{startRowIndex}, #{viewPostCntPerPage}
	</select>

	<!-- 새로운 게시글(댓글 형게시판을 저장하는 쿼리문 -->
	<insert id="saveNewBoard">
		insert into hboard(title, content, writer, boardType)
		values(#{title}, #{content}, #{writer}, 'rboard')
	</insert>

	<!-- 저장된 글번호를 가져오는 쿼리문 -->
	<select id="getMaxNo" resultType="int">
		select max(boardNo) from hboard
		where boardType='rboard'
	</select>

	<!-- 업로드된 첨부파일을 저장하는 쿼리문 -->
	<insert id="saveUpFile">
		insert into boardupfiles(newFileName,
		originalFileName,
		thumbFileName, ext, size, boardNo, base64Img)
		values
		(#{newFileName}, #{originalFileName}, #{thumbFileName}, #{ext},
		#{size}, #{boardNo}, #{base64Img});
	</insert>

	<!-- 게시글의 상세정보를 담기 위한 resultmap설정 -->
	<resultMap type="com.miniproj.model.BoardDetailInfo"
		id="boardDetailInfoMap">
		<result column="boardNo" property="boardNo" javaType="int" />
		<result column="title" property="title" javaType="String" />
		<result column="content" property="content" javaType="String" />
		<result column="writer" property="writer" javaType="String" />
		<result column="postDate" property="postDate"
			javaType="java.sql.Timestamp" />
		<result column="readCount" property="readCount" javaType="int" />
		<result column="isDelete" property="isDelete" javaType="String" />

		<result column="userName" property="userName" javaType="String" />
		<result column="email" property="email" javaType="String" />

	</resultMap>
	<!-- 게시글의 상세정보를 담는 조인문 -->
	<select id="selectBoardDetailInfoByBoardNo"
		resultMap="boardDetailInfoMap">
		select h.boardNo, h.title, h.content, h.writer, h.postDate,
		h.readCount, h.isDelete, m.userName, m.email
		from hboard h
		inner join
		member m
		on h.writer = m.userId
		where h.boardNo=#{boardNo} and
		boardType='rboard'
	</select>

	<!-- boardNo번 글을 삭제하는 쿼리문 -->
	<update id="deleteBoardByBoardNo">
		update hboard set isDelete='Y', title='', content=''
		where boardNo=#{boardNo}
	</update>

	<!-- boardNo번의 게시글을 수정하는 쿼리문 -->
	<update id="updateBoardByBoardNo">
		update hboard set title=#{title}, content=#{content}
		where boardNo=#{boardNo};
	</update>

	<!-- 첨부파일의 PK번호(boardUpFileNo) 로 첨부파일을 일부만 삭제하는 메서드 -->
	<delete id="deleteBoardUpFileByPK">
		delete from boardupfiles where
		boardUpFileNo=#{boardUpFileNo}
	</delete>

	<!-- 삭제되지 않은 글 중에서 조회수가 높은 순, 최신글 순 5개 가져오기 -->
	<select id="selectPopBoards"
		resultType="com.miniproj.model.HBoardVO">
		select boardNo, title, postDate from hboard where
		isDelete='N' and boardType='rboard' order by readCount desc, boardNo
		desc limit 5
	</select>

	<!-- 전체 게시글의 갯수 가져오기 -->
	<select id="selectTotalCnt" resultType="int">
		select count(*) from
		hboard where boardType='rboard'
	</select>

	<!-- 검색어가 있을 경우 데이터 갯수 가져오기 -->
	<select id="selectTotatlCntWithSearchCriteria" resultType="int">
		select count(*) from hboard
		<choose>
			<when test="searchType =='title'">
				where title like #{searchWord}
			</when>
			<when test="searchType =='writer'">
				where writer like #{searchWord}
			</when>
			<when test="searchType =='content'">
				where content like #{searchWord}
			</when>
		</choose>
		and boardType='rboard'
	</select>

	<!-- 검색어가 있을 경우 게시글 데이터 가져오기 -->
	<select id="getSearchBoardWithPaging"
		resultType="com.miniproj.model.HBoardVO">
		select * from hboard
		<choose>
			<when test="searchType =='title'">
				where title like #{searchWord}
			</when>
			<when test="searchType =='writer'">
				where writer like #{searchWord}
			</when>
			<when test="searchType =='content'">
				where content like #{searchWord}
			</when>
		</choose>
		and boardType='rboard'
		order by boardNo desc limit #{startRowIndex}, #{viewPostCntPerPage}
	</select>
</mapper>